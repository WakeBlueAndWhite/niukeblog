<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ceer.niukeblog.mapper.MessageMapper">
    <resultMap id="BaseResultMap" type="com.ceer.niukeblog.entity.Message">
        <!--@mbg.generated-->
        <!--@Table message-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="from_id" jdbcType="INTEGER" property="fromId"/>
        <result column="to_id" jdbcType="INTEGER" property="toId"/>
        <result column="conversation_id" jdbcType="VARCHAR" property="conversationId"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, from_id, to_id, conversation_id, content, `status`, create_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from message
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
        delete from message
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.ceer.niukeblog.entity.Message"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into message (from_id, to_id, conversation_id,
        content, `status`, create_time
        )
        values (#{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, #{conversationId,jdbcType=VARCHAR},
        #{content,jdbcType=LONGVARCHAR}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.ceer.niukeblog.entity.Message"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="fromId != null">
                from_id,
            </if>
            <if test="toId != null">
                to_id,
            </if>
            <if test="conversationId != null">
                conversation_id,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="fromId != null">
                #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                #{toId,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.ceer.niukeblog.entity.Message">
        <!--@mbg.generated-->
        update message
        <set>
            <if test="fromId != null">
                from_id = #{fromId,jdbcType=INTEGER},
            </if>
            <if test="toId != null">
                to_id = #{toId,jdbcType=INTEGER},
            </if>
            <if test="conversationId != null">
                conversation_id = #{conversationId,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ceer.niukeblog.entity.Message">
        <!--@mbg.generated-->
        update message
        set from_id = #{fromId,jdbcType=INTEGER},
        to_id = #{toId,jdbcType=INTEGER},
        conversation_id = #{conversationId,jdbcType=VARCHAR},
        content = #{content,jdbcType=LONGVARCHAR},
        `status` = #{status,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectConversations" resultType="com.ceer.niukeblog.entity.Message">
        select
        <include refid="Base_Column_List"/>
        from message
        where id in (
        select max(id) from message
        where status != 2
        and from_id != 1
        and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
    select count(m.maxid) from (
    select max(id) as maxid from message
    where status != 2
    and from_id != 1
    and (from_id = #{userId} or to_id = #{userId})
    group by conversation_id
    ) as m
  </select>

    <select id="selectLetters" resultType="com.ceer.niukeblog.entity.Message">
        select
        <include refid="Base_Column_List"/>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
    select count(id)
    from message
    where status != 2
    and from_id != 1
    and conversation_id = #{conversationId}
  </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from message
        where id in (
        select max(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId,jdbcType=INTEGER}
        and conversation_id = #{topic,jdbcType=VARCHAR}
        )
    </select>

    <select id="selectNoticeCount" resultType="int">
        select
        count(id)
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId,jdbcType=INTEGER}
        and conversation_id = #{topic,jdbcType=VARCHAR}
    </select>

    <select id="selectNoticeUnreadCount" resultType="int">
        select
        count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId,jdbcType=INTEGER}
        <if test="topic!=null ">
            and conversation_id = #{topic,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="selectNotices" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId,jdbcType=INTEGER}
        and conversation_id = #{topic}
        order by id desc
        limit #{offset}, #{limit}
    </select>
</mapper>